@page
@model RazorPagesMovie.Pages.Movies.IndexModel

@{
    ViewData["Title"] = "Index";
    //The preceding highlighted markup is an example of Razor transitioning into C#. The { and } characters enclose a block of C# code.
}

<h1>Index</h1>


@*Razor can transition from HTML into C# or into Razor-specific markup. 
When an @ symbol is followed by a Razor reserved keyword, it transitions into Razor-specific markup, otherwise it transitions into C#
The @page Razor directive makes the file an MVC action, which means that it can handle requests. 
@page must be the first Razor directive on a page. @page and @model are examples of transitioning into Razor-specific markup.


The @model directive specifies the type of the model passed to the Razor Page. 
In the preceding example, the @model line makes the PageModel derived class available to the Razor Page.
*@

<p>
    <a asp-page="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Movie[0].Title)
                @*The DisplayNameFor HTML Helper inspects the Title property referenced in the lambda expression to determine the display name. 
                The lambda expression is inspected rather than evaluated. 
                That means there is no access violation when model, model.Movie, or model.Movie[0] is null or empty. 
                When the lambda expression is evaluated, for example, with @Html.DisplayFor(modelItem => item.Title), the model's property values are evaluated.*@
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movie[0].ReleaseDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movie[0].Genre)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movie[0].Price)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.Movie) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReleaseDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Genre)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                <a asp-page="./Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-page="./Details" asp-route-id="@item.Id">Details</a> |
                <a asp-page="./Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
